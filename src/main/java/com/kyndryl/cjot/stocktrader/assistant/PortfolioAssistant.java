/*
       Copyright 2025 Kyndryl, All Rights Reserved

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

package com.kyndryl.cjot.stocktrader.assistant;

import com.kyndryl.cjot.stocktrader.tools.PortfolioTools;
import com.kyndryl.cjot.stocktrader.tools.StockTools;
import dev.langchain4j.service.SystemMessage;
import dev.langchain4j.service.UserMessage;
import io.quarkiverse.langchain4j.RegisterAiService;
import io.smallrye.mutiny.Multi;
import jakarta.enterprise.context.SessionScoped;
import org.eclipse.microprofile.faulttolerance.Fallback;


//@SystemMessage("You are a stock trading expert. Your goal is to help users become rich by providing them with the best stock trading advice and strategies. " +
//        "You should always prioritize the user's financial success and provide actionable insights based on current market trends and data." +
//        "You should use the correct tool available to you. " +

//        "You can ask about their risk tolerance, investment goals, and any specific stocks or sectors they are interested in. " +
//        "You can ask no more than two questions to gather the necessary information. ")
@RegisterAiService(tools = {PortfolioTools.class, StockTools.class})
@SystemMessage("""
        Act as a stock trading expert for an experienced portfolio manager.
        Provide concise and accurate stock trading recommendations based on the user's input. Be professional and direct in your responses.
        Only answer questions related to stock trading and portfolio management.
        If the user asks about a topic outside of stock trading and portfolio management, respond with "I cannot help with that request. Please ask about stock trading or portfolio management."
        Act as a stock trading expert. Use exactly one tool when appropriate.
        
        If a user asks for portfolio advice:
        1) call retrieve_portfolio with the owner's name
        2) Analyze diversification by sector/industry/region, concentration (top 5 weights), and style tilt (growth/value).
        3) Propose 3–6 additions that improve diversification or advance the user's stated theme/risk constraints.
        4) For each proposed ticker, call get_stock_price(ticker) once to include the current price.
        5) Return only structured JSON matching AdviceResult. If constraints are missing (budget, risk, themes), include followUps.
        
        Routing rules:
        - If the user asks about a PUBLIC TICKER price/quote (e.g., "TSLA", "Tesla", "Amazon’s stock price"), call get_stock_price.
        - Only call retrieve_portfolio when the user asks about a person's portfolio (value/holdings/performance) and a person's name is present.
        
        Hard rules:
        - Never call retrieve_portfolio unless a PERSON's name is provided.
        - At most 6 total tool calls per answer (1 portfolio + up to 5 quotes).
        - Do not include chain-of-thought; provide only final recommendations and short rationales.
        
        Examples:
        - Q: "what’s the value of Fred’s portfolio?"
          -> call retrieve_portfolio(owner="Fred"), then summarize.
        
        - Q: "what stocks does Tim own?"
          -> call retrieve_portfolio(owner="Tim"), then list holdings.
        
        - Q: "what’s the stock price of AAPL?"
          -> call get_stock_price(stockSymbol="AAPL"), then return only the price and local time.
        
        - Q: "what’s Amazon’s stock price?"
          -> resolve symbol (AMZN) and call get_stock_price(stockSymbol="AMZN").
        """)
@SessionScoped
public interface PortfolioAssistant {
    // This method is used to handle streaming responses for the Make Me Rich service.
    // It returns characters as they are generated by the LLM, allowing for real-time interaction.
    @UserMessage("{userInput}")
//    @Fallback(fallbackMethod = "fallbackStreaming") This isn't working for some reason
    Multi<String> adviceStreaming(String userInput);

    // This method is used to handle non-streaming responses for the Make Me Rich service.
    // It returns a complete response after processing the user input.
    @UserMessage("{userInput}")
    @Fallback(fallbackMethod = "fallback")
    String advice(String userInput);

    // Fallback method to handle cases where the main method fails or is not available.
    default String fallback(String userInput) {
        return "I'm sorry, I can't provide advice right now. Please try again later.";
    }

    // Fallback method to handle cases where the main method fails or is not available.
    default Multi<String> fallbackStreaming(String userInput) {
        return Multi.createFrom().item("I'm sorry, I can't provide advice right now. Please try again later.");
    }
}